<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
* The mbanalytics api exposed in /portal/apis/mbanalytics context path. Purpose of this api is to retrieve data from
* backend and send back to visualize gadget.
*/
(function () {

    //variable define and initialization
    var PARAM_TYPE = "type";
    var CONTENT_TYPE_JSON = "application/json";
    var AUTHORIZATION_HEADER = "Authorization";
    var USER_TOKEN = "user";
    var USERNAME = "username";
    var TENANT_DOMAIN = "domain";
    var CONST_AT = "@";
    var HTTP_USER_NOT_AUTHENTICATED = 403;
    var HTTP_INTERNAL_ERROR = 500;
    var log = new Log();
    var carbon = require('carbon');
    var configs = require('/configs/designer.json');
    var utils = require('/modules/utils.js');
    var mbanalyticsUtils = require('mbanalytics-utils.jag');
    var JSUtils = Packages.org.wso2.carbon.analytics.jsservice.Utils;
    var AnalyticsCachedJSServiceConnector = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector;
    var AnalyticsCache = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsCachedJSServiceConnector.AnalyticsCache;
    var cacheTimeoutSeconds = 5;
    var loggedInUser = null;
    var tenantId = -1;
    var superTenantId = -1234;
    var tenantDomain = "carbon.super"
    var timeRangeUtil = Packages.org.wso2.analytics.mb.util.TimeRangeUtils;
    var timeRange = Packages.org.wso2.analytics.mb.bean.TimeRange;

    //operation types
    var TYPE_MSG_RECEIVE_RATE = 1;
    var TYPE_MSG_SEND_RATE = 2;
    var TYPE_TOTAL_PUB_SUB_CHANNEL_COUNT = 3;
    var TYPE_DB_READ_TIME = 4;
    var TYPE_DB_WRITE_TIME = 5;
    var TYPE_DB_READ_RATE = 6;
    var TYPE_DB_WRITE_RATE = 7;
    var TYPE_MSG_OVERVIEW = 8;
    var TYPE_MSG_ACK_RATE = 9;
    var TYPE_MSG_REJECT_RATE = 10;
    var TYPE_SELECT_NODE = 11;
    var TYPE_SEARCH_QUEUE_TOPIC = 12;

    if (configs.cacheTimeoutSeconds) {
        cacheTimeoutSeconds = parseInt(configs.cacheTimeoutSeconds);
    }
    var cacheSizeBytes = 1024 * 1024 * 1024; // 1GB
    if (configs.cacheSizeBytes) {
        cacheSizeBytes = parseInt(configs.cacheSizeBytes);
    }

    response.contentType = CONTENT_TYPE_JSON;

    var authParam = request.getHeader(AUTHORIZATION_HEADER);
    if (authParam != null) {
        credentials = JSUtils.authenticate(authParam);
        loggedInUser = credentials[0];
    } else {
        var token = session.get(USER_TOKEN);
        if (token != null) {
            loggedInUser = token[USERNAME] + CONST_AT + token[TENANT_DOMAIN];
        } else {
            log.error("user is not authenticated!");
            response.status = HTTP_USER_NOT_AUTHENTICATED;
            print('{ "status": "Failed", "message": "User is not authenticated." }');
            return;
        }
    }

    var user = carbon.server.tenantUser(loggedInUser);
    tenantId = user.tenantId;
    //initialize tenant domain
    if (carbon.server.superTenant.tenantId != tenantId) {
        tenantDomain = carbon.server.tenantDomain({
            tenantId: tenantId
        });
    }

    var cache = application.get("AnalyticsWebServiceCache");
    if (cache == null) {
        cache = new AnalyticsCache(cacheTimeoutSeconds, cacheSizeBytes);
        application.put("AnalyticsWebServiceCache", cache);
    }

    var connector = new AnalyticsCachedJSServiceConnector(cache);

    var type = 0;
    var paramType = request.getParameter(PARAM_TYPE);
    if (paramType != null) {
        type = parseInt(paramType);
    }

    var source = request.getParameter("id");
    if (source == "undefined" || source == "ALL") {
        source = "CLUSTER";
    }

    if (type == 0) {
        log.error("operation type is not specified!");
        response.status = HTTP_INTERNAL_ERROR;
        print('{ "status": "Failed", "message": "Operation type is not specified" }');
        return;
    }

    var content = request.getContent();
    if (content != '' && content != null) {
        if (log.isDebugEnabled()) {
            log.debug("value of content: " + stringify(contentAsString));
        }
    }

    if (connector == null && loggedInUser == null) {
        print('{ "status": "Failed", "statusCode": "500", "message": "AnalyticsCachedWebServiceConnector is unavailable" }');
        return;
    }

    //call relevant function in mbanalytics-utils.jag based on the type passed by gadget
    var timeFrom = request.getParameter("timeFrom");
    var timeTo = request.getParameter("timeTo");
    var timeUnit = null;
    if (timeFrom != null && timeTo != null) {
     	timeUnit = timeRangeUtil.getSuitableTimeRangeUnit(timeFrom, timeTo);
        if (timeUnit == "SECOND") {
    	    timeUnit = "MINUTE";
    	}
    }
    var result = null;
    switch (type) {
        case TYPE_MSG_RECEIVE_RATE:
        {
            result = mbanalyticsUtils.getResultsFromMeterTable
            (connector, superTenantId, timeUnit, timeFrom, timeTo, "org.wso2.mb.message.receive", tenantDomain, source);
            break;
        }
        case TYPE_MSG_SEND_RATE:
        {
            result = mbanalyticsUtils.getResultsFromMeterTable
            (connector, superTenantId, timeUnit, timeFrom, timeTo, "org.wso2.mb.message.sent", tenantDomain, source);
            break;
        }
        case TYPE_TOTAL_PUB_SUB_CHANNEL_COUNT:
        {
            var view = {
                Channel: "org.wso2.mb.channels.active.count",
                Queue: "org.wso2.mb.queue.subscribers.count",
                Topic: "org.wso2.mb.topic.subscribers.count"
            }
            result = mbanalyticsUtils.getMultiResultsFromGaugeTable
            (connector, superTenantId, timeUnit, timeFrom, timeTo, view, tenantDomain, source);
            break;
        }
        case TYPE_DB_READ_TIME:
        {
            result = mbanalyticsUtils.getResultsFromTimerTable
            (connector, superTenantId, timeUnit, timeFrom, timeTo, "org.wso2.mb.database.read", tenantDomain, source);
            break;
        }
        case TYPE_DB_WRITE_TIME:
        {
            result = mbanalyticsUtils.getResultsFromTimerTable
            (connector, superTenantId, timeUnit, timeFrom, timeTo, "org.wso2.mb.database.write", tenantDomain, source);
            break;
        }
        case TYPE_DB_READ_RATE:
        {
            result = mbanalyticsUtils.getResultsFromTimerTable(connector, superTenantId, timeUnit, timeFrom, timeTo,
                                                                     "org.wso2.mb.database.read", tenantDomain, source);
            break;
        }
        case TYPE_DB_WRITE_RATE:
        {
            result = mbanalyticsUtils.getResultsFromTimerTable
            (connector, superTenantId, timeUnit, timeFrom, timeTo, "org.wso2.mb.database.write", tenantDomain, source);
            break;
        }
        case TYPE_MSG_OVERVIEW:
        {
            var view = {
                enqueue: "org.wso2.mb.enqueue.count",
                dequeue: "org.wso2.mb.dequeue.count",
                ack: "org.wso2.mb.ack.count",
                reject: "org.wso2.mb.reject.count"
            }
            result = mbanalyticsUtils.getResultsFromCounterTableForMessageOverview
            (connector, superTenantId, timeUnit, timeFrom, timeTo, view, tenantDomain, source);
            break;
        }
        case TYPE_MSG_ACK_RATE:
        {
            result = mbanalyticsUtils.getResultsFromMeterTable
            (connector, superTenantId, timeUnit, timeFrom, timeTo, "org.wso2.mb.ack.receive", tenantDomain, source);
            break;
        }
        case TYPE_MSG_REJECT_RATE:
        {
            result = mbanalyticsUtils.getResultsFromMeterTable
            (connector, superTenantId, timeUnit, timeFrom, timeTo, "org.wso2.mb.reject.receive", tenantDomain, source);
            break;
        }
        case TYPE_SELECT_NODE:
        {
            result = mbanalyticsUtils.getAllSource(connector, superTenantId, tenantDomain);
            break;
        }
        case TYPE_SEARCH_QUEUE_TOPIC:
        {
            break;
        }
        default:
        {
            result = '{ "status": "Failed", "message": "Unidentified operation" }';
            break;
        }
    }

    if (log.isDebugEnabled()) {
        if (result != null) {
            log.debug("value of result: " + result);
        }
    }

    if (result != null) {
        var finalResult = {
            status: "success",
            message: result
        }
        print(finalResult);
    }

}());
%>