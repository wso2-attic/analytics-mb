<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
* Get results from metrics METER table for the given view
*/
function getResultsFromMeterTable(connector, superTenantId, timeUnit, timeFrom, timeTo, view, tenantDomain, source) {
    var result = [];
    var tableName = "ORG_WSO2_MB_ANALYTICS_STREAM_METERSTATS" + timeUnit;
    var query = stringify({
        query: "_name : \"" + view + "\" AND _timestamp : [" + timeFrom + " TO " + timeTo + "] AND " +
                                       "meta_tenantDomain : \"" + tenantDomain + "\"  AND source : \"" + source + "\"",
        "start": 0,
        "count": 1000,
        "sortBy": [{
            field: "_timestamp",
            sortType: "ASC",
        }]
    });
    var resp = connector.search(superTenantId, tableName, query);
    var dataPoints = [];
    try {
        dataPoints = JSON.parse(resp.getMessage());
    } catch (error) {
        var log = new Log();
        log.error(error);
    }
    for (var i = 0; i < dataPoints.length; i++) {
        var obj = dataPoints[i];
        if (obj != null) {
            result.push({
                "timestamp": obj.timestamp,
                "oneMinuteRate": obj.values.rate.toFixed(2)
            });
        }
    }
    return result;
};

/*
* Get results from metrics GAUGE table for the given view
*/
function getResultsFromGaugeTable(connector, superTenantId, timeUnit, timeFrom, timeTo, view, tenantDomain, source) {
    var result = [];
    var tableName = "ORG_WSO2_MB_ANALYTICS_STREAM_GAUGESTATS" + timeUnit;
    var query = stringify({
        query: "_name : \"" + view + "\" AND _timestamp : [" + timeFrom + " TO " + timeTo + "] AND " +
                                       "meta_tenantDomain : \"" + tenantDomain + "\"  AND source : \"" + source + "\"",
        "start": 0,
        "count": 1000,
        "sortBy": [{
            field: "_timestamp",
            sortType: "ASC",
        }]
    });
    var resp = connector.search(superTenantId, tableName, query);
    var dataPoints = [];
    try {
        dataPoints = JSON.parse(resp.getMessage());
    } catch (error) {
        var log = new Log();
        log.error(error);
    }
    for (var i = 0; i < dataPoints.length; i++) {
        var obj = dataPoints[i];
        if (obj != null) {
            result.push({
                "timestamp": obj.timestamp,
                "count": obj.values.value.toFixed(2)
            });
        }
    }
    return result;
};

/*
* Get multi results from metrics GAUGE table for the given view
*/
function getMultiResultsFromGaugeTable(connector, superTenantId, timeUnit, timeFrom, timeTo, view, tenantDomain, source) {
    var result = [];
    var tableName = "ORG_WSO2_MB_ANALYTICS_STREAM_GAUGESTATS" + timeUnit;
    for (var key in view) {
        var query = stringify({
            query: "_name : \"" + view[key] + "\" AND _timestamp : [" + timeFrom + " TO " + timeTo + "] AND " +
                                       "meta_tenantDomain : \"" + tenantDomain + "\"  AND source : \"" + source + "\"",
            "start": 0,
            "count": 1000,
            "sortBy": [{
                field: "_timestamp",
                sortType: "ASC",
            }]
        });
        var resp = connector.search(superTenantId, tableName, query);
        var dataPoints = [];
        try {
            dataPoints = JSON.parse(resp.getMessage());
        } catch (error) {
            var log = new Log();
            log.error(error);
        }
        for (var i = 0; i < dataPoints.length; i++) {
            var obj = dataPoints[i];
            if (obj != null) {
                result.push({
                    "timestamp": obj.timestamp,
                    "type": key,
                    "count": obj.values.value.toFixed(2)
                });
            }
        }
    }
    return result;
};

/*
* Get results from metrics TIMER table for the given view
*/
function getResultsFromTimerTable(connector, superTenantId, timeUnit, timeFrom, timeTo, view, tenantDomain, source) {
    var result = [];
    var tableName = "ORG_WSO2_MB_ANALYTICS_STREAM_TIMERSTATS" + timeUnit;
    var query = stringify({
        query: "_name : \"" + view + "\" AND _timestamp : [" + timeFrom + " TO " + timeTo + "] AND " +
                                        "meta_tenantDomain : \"" + tenantDomain + "\"  AND source : \"" + source + "\"",
        "start": 0,
        "count": 1000,
        "sortBy": [{
            field: "_timestamp",
            sortType: "ASC",
        }]
    });
    var resp = connector.search(superTenantId, tableName, query);
    var dataPoints = [];
    try {
        dataPoints = JSON.parse(resp.getMessage());
    } catch (error) {
        var log = new Log();
        log.error(error);
    }
    for (var i = 0; i < dataPoints.length; i++) {
        var obj = dataPoints[i];
        if (obj != null) {
            result.push({
                "timestamp": obj.timestamp,
                "max": obj.values.maxDuration.toFixed(2),
                "mean": obj.values.meanDuration.toFixed(2),
                "oneMinuteRate": obj.values.rate.toFixed(2)
            });
        }
    }
    return result;
};

/*
* Get results from metrics COUNTER table for the message overview
*/
function getResultsFromCounterTableForMessageOverview(connector, superTenantId, timeUnit, timeFrom, timeTo, view, tenantDomain, source) {
    var result = [];
    var tableName = "ORG_WSO2_MB_ANALYTICS_STREAM_COUNTERSTATS" + timeUnit;
    var enqueue, dequeue, acknowledge, reject = 0;
    for (var key in view) {
        var query = stringify({
            query: "_name : \"" + view[key] + "\" AND _timestamp : [" + timeFrom + " TO " + timeTo + "] AND " +
                                        "meta_tenantDomain : \"" + tenantDomain + "\"  AND source : \"" + source + "\"",
            "start": 0,
            "count": 1,
            "sortBy": [{
                field: "_timestamp",
                sortType: "DESC",
            }]
        });
        var resp = connector.search(superTenantId, tableName, query);
        var dataPoints = [];
        try {
            dataPoints = JSON.parse(resp.getMessage());
        } catch (error) {
            var log = new Log();
            log.error(error);
        }
        for (var i = 0; i < dataPoints.length; i++) {
            var obj = dataPoints[i];
            if (obj != null) {
                switch (obj.values.name) {
                    case "org.wso2.mb.enqueue.count":
                    {
                        enqueue = obj.values.totalCount;
                        break;
                    }
                    case "org.wso2.mb.dequeue.count":
                    {
                        dequeue = obj.values.totalCount;
                        break;
                    }
                    case "org.wso2.mb.ack.count":
                    {
                        acknowledge = obj.values.totalCount;
                        break;
                    }
                    case "org.wso2.mb.reject.count":
                    {
                        reject = obj.values.totalCount;
                        break;
                    }
                    default:
                    {
                        break;
                    }

                }
            }
        }
    }
    result = {enqueue: enqueue, dequeue: dequeue, acknowledge: acknowledge, reject: reject};
    return result;
};

/*
* Get all node (source) identifiers from table
*/
function getAllSource(connector, superTenantId, tenantDomain) {
    result = [];
    var tableName = "ORG_WSO2_MB_ANALYTICS_STREAM_TIMERSTATSMINUTE";
    query = stringify({
                          "fieldName": "source",
                          "query": "meta_tenantDomain : \"" + tenantDomain + "\""
                      });
    resp = connector.drillDownCategories(superTenantId, tableName, query);
    if (resp.status == "success") {
        var sources = JSON.parse(resp.getMessage());
        for (var name in sources["categories"]) {
            if (name != "CLUSTER") {
                result.push(name);
            }
        }
    } else {
        var log = new Log();
        log.error(resp.getMessage());
    }
    return result;
};
%>